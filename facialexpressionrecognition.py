# -*- coding: utf-8 -*-
"""facialExpressionRecognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16l6aV-VfZXAphSz5lLsURfnsjfnqUwum

Facial Expressions Recognition

# Importing Libraries
"""

import pandas as pd
import numpy as np
import cv2
import matplotlib.pyplot as plt
import seaborn as sns

"""Loading Dataset"""

#download dataset from fer 2013 kaggle
df=pd.read_csv('fer2013.csv')

"""# Exploratory Data Analysis"""

df.head()

df['emotion'].unique()

emotion_map = {0: 'Angry', 1: 'Digust', 2: 'Fear', 3: 'Happy', 4: 'Sad', 5: 'Surprise', 6: 'Neutral'}
emotion_counts = df['emotion'].value_counts(sort=False).reset_index()
emotion_counts.columns = ['emotion', 'number']
emotion_counts['emotion'] = emotion_counts['emotion'].map(emotion_map)
emotion_counts

#split data into training, validation and test set
data_train = df[df['Usage']=='Training'].copy()
data_val   = df[df['Usage']=='PublicTest'].copy()
data_test  = df[df['Usage']=='PrivateTest'].copy()
print("train shape: {}, \nvalidation shape: {}, \ntest shape: {}".format(data_train.shape, data_val.shape, data_test.shape))

# Plotting a bar graph of the class distributions
plt.figure(figsize=(6,4))
sns.barplot(emotion_counts.emotion)
plt.title('Class distribution')
plt.ylabel('Number', fontsize=12)
plt.xlabel('Emotions', fontsize=12)
plt.show()

sns.barplot(x=df['emotion'].value_counts().index, y=df['emotion'].value_counts())
plt.title('Number of images per emotion')

"""Let's look at some images.."""

df[' pixels'][0]

img=df[' pixels'][920]

img=np.array(img.split(' ')).reshape(48,48,1).astype('float32')

img.shape

plt.imshow(img.squeeze(),cmap='gray')

"""# Preprocessing"""

images_list=np.zeros((len(df),48,48,1))

images_list.shape

images_label=pd.get_dummies(df['emotion'])

images_label

for idx in range(len(df)):
    single_pic=np.array(df[' pixels'][idx].split(' ')).reshape(1,48,48,1).astype('float32')
    images_list[idx]=single_pic

images_list.shape

images_list[0].shape

images_list[334].shape

images_list[0]

plt.imshow(images_list[342].squeeze(),cmap='gray')

df['emotion'].value_counts()

collections.Counter(np.array(df['emotion']))



"""# Splitting dataset to train and test"""

from sklearn.model_selection import train_test_split
X_train, X_Test, y_train, y_Test=train_test_split(images_list, images_label,test_size=0.20, shuffle=True)
X_val, X_Test, y_val, y_Test=train_test_split(X_Test, y_Test, test_size=0.5, shuffle= True)

X_train.shape

X_Test.shape

X_val.shape

X_train

"""# Normalizing"""

X_train=X_train/255
X_val=X_val/255
X_Test=X_Test/255

X_train

!pip install keras==2.1.5

"""Applying data augmentation"""

from keras.preprocessing.image import ImageDataGenerator
datagen = ImageDataGenerator(
    featurewise_center=False,
    samplewise_std_normalization = False,
    zca_whitening= False,
    featurewise_std_normalization = True,
    rotation_range = 30,
    width_shift_range= 0.1,
    height_shift_range=0.1,
    zoom_range=0.2)

datagen.fit(X_train)

input_reshape=(48,48,1)
epochs=10
batch_size=128
hidden_num_units=256
output_num_units=7

pool_size=(2,2)

"""# Building Model"""

import tensorflow.keras as keras

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout, Convolution2D,Flatten, MaxPooling2D, Reshape, InputLayer
from keras.layers.normalization import BatchNormalization
from tensorflow.keras.preprocessing.image import load_img

model=Sequential([
    Convolution2D(32, (3,3), activation='relu',input_shape=input_reshape),
    MaxPooling2D((2,2)),

    Convolution2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),

    Convolution2D(64, (3,3), activation='relu'),
    MaxPooling2D((2,2)),

    Convolution2D(64, (3,3), activation='relu'),

    Flatten(),

    Dense(64, 'relu'),

    Dense(7, 'softmax'),

])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
trained_model_conv=model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_val, y_val))

"""# Prediction"""

model.predict_classes(X_train[345].reshape(1,48,48,1))

# 0 angry, 1 disgust, 2 fear, 3 happy, 4 sad, 5surprise, 6 neutral

plt.imshow(images_list[345].squeeze(),cmap='gray')

